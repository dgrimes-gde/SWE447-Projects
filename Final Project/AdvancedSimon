package Simon;

import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.ArrayList;
import java.util.Random;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.event.ActionEvent;

import javax.swing.JFrame;
import javax.swing.Timer;

public class AdvancedSimon implements ActionListener, MouseListener
{
	public static AdvancedSimon Advancedsimon;
	
	public Renderer renderer;
	
	public static final int WIDTH = 800, HEIGHT = 800;
	 
	public int sequence = 0, inactive, flashCount, currentSequence;
	
	public boolean newSequence = true ;
	
	public ArrayList<Integer> patternSequence;
	
	public Random probability;
	
	private boolean endGame;
	
	public AdvancedSimon()
	{
		JFrame frame = new JFrame("GUI GRAPHICS PROJECT");
		Timer timer = new Timer(20, this);
		
		renderer = new Renderer();
		
		
		frame.setSize(WIDTH + 8, HEIGHT + 25 );
		frame.setVisible(true);
		frame.add(renderer);
		frame.addMouseListener(this);
		frame.setResizable(false);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		start();
		timer.start();
	}
	
	public void start()
	
	{
		probability = new Random();
		patternSequence = new ArrayList<Integer>();
		currentSequence = 0;
		inactive = 2;
		sequence = 0;
		flashCount = 0;
	}
	
	public static void main(String[] args)
	{
		
		Advancedsimon = new AdvancedSimon();
	}
	
	@Override
	public void actionPerformed(ActionEvent e)
	{
		flashCount++;

		if (flashCount % 20 == 0)
		{
			sequence = 0;

			if (inactive >= 0)
			{
				inactive--;
			}
		}

		if (newSequence)
		{
			if (inactive <= 0)
			{
				if (currentSequence >= patternSequence.size())
				{
					sequence = probability.nextInt(40) % 4 + 1;
					patternSequence.add(sequence);
					currentSequence = 0;
					newSequence = false;
				}
				else
				{
					sequence = patternSequence.get(currentSequence);
					currentSequence++;
				}

				inactive = 2;
			}
		}
		else if (currentSequence == patternSequence.size())
		{
			newSequence = true;
			currentSequence = 0;
			inactive = 2;
		}

		renderer.repaint();
	}
	//All painting methods 
	public void paint(Graphics2D g) 
	{
		g.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		
		
		if(sequence == 1)
		{
			g.setColor(Color.RED.brighter());
		}
		else
		{
			g.setColor(Color.RED.darker());
		}
		g.fillRect(0, 0, WIDTH / 2, HEIGHT / 2);
		
		
		if(sequence == 2)
		{
			g.setColor(Color.BLUE.brighter());
		}
		else
		{
			g.setColor(Color.BLUE.darker());
		}
		g.fillRect(WIDTH / 2, 0, WIDTH / 2, HEIGHT / 2);
		
		if(sequence == 3)
		{
			g.setColor(Color.ORANGE.brighter());
		}
		else
		{
			g.setColor(Color.ORANGE.darker());
		}
		g.fillRect(0, HEIGHT / 2, WIDTH / 2, HEIGHT / 2);
		
		if(sequence == 4)
		{
			g.setColor(Color.GREEN.brighter());
		}
		else
		{
			g.setColor(Color.GREEN.darker());
		}
		g.fillRect(WIDTH / 2, HEIGHT / 2, WIDTH / 2, HEIGHT / 2);
		

		
		
		g.setColor(Color.WHITE);
		g.fillRoundRect(220, 220, 350, 350, 300, 300 );
		g.fillRect(WIDTH / 2 - WIDTH / 12, 0 , WIDTH / 7, HEIGHT);
		g.fillRect(0,WIDTH / 2 - WIDTH / 12, WIDTH, HEIGHT/ 7);
		
		// Background size color and orgin 
		g.setColor(Color.RED);
		g.setStroke(new BasicStroke(200));
		g.drawOval(-100, -100, WIDTH + 200, HEIGHT + 200);
		
		//Outer ring Stroke color 
		g.setColor(Color.BLACK);
		g.setStroke(new BasicStroke(10));
		g.drawOval(0, 0, WIDTH, HEIGHT);
		
		// Pattern Count, color, and font size 
		g.setColor(Color.RED);
		g.setFont(new Font( "Impact", 1, 142) );
		
		if (endGame)
		{
			g.drawString(":(", WIDTH / 2 - 100, HEIGHT / 2 + 42);
		}
		else
		{
			g.drawString(currentSequence + "/" + patternSequence.size(), WIDTH / 2 - 100, HEIGHT / 2 + 42);
		}
	}

	
	@Override
	public void mousePressed(MouseEvent e) 
	{
		
		//g.fillRect(0, 0, WIDTH / 2, HEIGHT / 2);
		//g.fillRect(WIDTH / 2, 0, WIDTH / 2, HEIGHT / 2);
		//g.fillRect(0, HEIGHT / 2, WIDTH / 2, HEIGHT / 2);e
		//g.fillRect(WIDTH / 2, HEIGHT / 2, WIDTH / 2, HEIGHT / 2);
		 
		
		int x = e.getX(), y = e.getY();
		if (!newSequence && !endGame)
		{
			if (x > 0 && x < WIDTH / 2 && y > 0 && y < HEIGHT / 2)
			{
				sequence = 1;
				flashCount = 1;
			}
			else if (x > WIDTH / 2 && x < WIDTH && y > 0 && y < HEIGHT / 2)
			{
				sequence = 2;
				flashCount = 1;
			}
			else if (x > 0 && x < WIDTH / 2 && y > HEIGHT / 2 && y < HEIGHT)
			{
				sequence = 3;
				flashCount = 1;
			}
			else if (x > WIDTH / 2 && x < WIDTH && y > HEIGHT / 2 && y < HEIGHT)
			{
				sequence = 4;
				flashCount = 1;
			}

			if (sequence != 0)
			{
				if (patternSequence.get(currentSequence) == sequence)
				{
					currentSequence++;
				}
				else
				{
					endGame = true;
				}
			}
		}
		else if (endGame)
		{
			start();
			endGame = false;
		}
	}


	@Override
	public void mouseClicked(MouseEvent e) 
	{
		
	}
	@Override
	public void mouseEntered(MouseEvent e) 
	{
		
	}
	@Override
	public void mouseExited(MouseEvent e) 
	{		
	}
	
	@Override
	public void mouseReleased(MouseEvent e) 
	{		
	}
	
}
